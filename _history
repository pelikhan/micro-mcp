{"entries":[{"timestamp":1748981361906,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"interface McpTool {\n    name: string\n    description: string\n    inputSchema: {\n        type: \"object\",\n        properties: Record<string, object>\n        required: string[]\n    }\n    handler: (args: any[]) => string\n}\nconst LED_TOOL_DEF: McpTool = {\n    name: \"led.set\",\n    description: \"Turn a pixel on the 5×5 LED matrix on or off\",\n    inputSchema: {\n        type: \"object\",\n        properties: {\n            x: { type: \"integer\", description: \"Column (0-4)\" },\n            y: { type: \"integer\", description: \"Row (0-4)\" },\n            on: { type: \"boolean\", description: \"true → on, false → off\" }\n        },\n        required: [\"x\", \"y\", \"on\"]\n    }\n    handler: (args) => {\n        \n    }\n};\n\nconst tools = [LED_TOOL_DEF]\n\n/**\n * Send a JSON-RPC message back to the host.\n */\nfunction send(msg: any) {\n    serial.writeLine(JSON.stringify(msg));\n}\n\n/**\n * Optional notification: tell the client our tool list is ready.\n * (Only needed once after boot.)\n */\nsend({\n    jsonrpc: \"2.0\",\n    method: \"notifications/tools/list_changed\"\n});\n\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), () => {\n    const raw = serial.readLine().trim();\n    if (!raw) return;\n\n    let req: any;\n    try {\n        req = JSON.parse(raw);\n    } catch {\n        // malformed JSON – ignore\n        return;\n    }\n\n    // Validate JSON-RPC envelope\n    if (!req || req.jsonrpc !== \"2.0\" || typeof req.id === \"undefined\") return;\n\n    switch (req.method) {\n        // 1️⃣  Discovery: tools/list\n        //    → return the single LED tool we support.\n        case \"tools/list\": {\n            send({\n                jsonrpc: \"2.0\",\n                id: req.id,\n                result: { tools: [LED_TOOL_DEF] }\n            });\n            break;\n        }\n        // 2️⃣  Invocation: tools/call\n        case \"tools/call\": {\n            const { name, arguments: args } = req.params || {};\n\n            if (name !== \"led.set\") {\n                send({\n                    jsonrpc: \"2.0\",\n                    id: req.id,\n                    error: { code: -32601, message: \"Unknown tool\" }\n                });\n                break;\n            }\n\n            // Basic validation\n            const x = args?.x; \n            const y = args?.y; on = args?.on;\n            const ok = Number.isInteger(x) && Number.isInteger(y) &&\n                x >= 0 && x <= 4 && y >= 0 && y <= 4 &&\n                typeof on === \"boolean\";\n\n            if (!ok) {\n                send({\n                    jsonrpc: \"2.0\",\n                    id: req.id,\n                    error: { code: -32602, message: \"Invalid parameters\" }\n                });\n                break;\n            }\n\n            // Perform the requested action\n            if (on) led.plot(x, y); else led.unplot(x, y);\n\n            // Successful result\n            send({\n                jsonrpc: \"2.0\",\n                id: req.id,\n                result: {\n                    content: [{\n                        type: \"text\",\n                        text: `LED (${x},${y}) ${on ? \"on\" : \"off\"}`\n                    }],\n                    isError: false\n                }\n            });\n            break;\n        }\n\n        // 3️⃣  Any other method → Method not found\n        default:\n            send({\n                jsonrpc: \"2.0\",\n                id: req.id,\n                error: { code: -32601, message: \"Unknown method\" }\n            });\n    }\n});"],[0,"\n"]],"start1":0,"start2":0,"length1":3402,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":233,"start2":233,"length1":32,"length2":31}]}]},{"timestamp":1748981956891,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," \"on\"]\n    }"],[-1,","],[0,"\n    handler"]],"start1":643,"start2":643,"length1":25,"length2":24},{"diffs":[[0,"s) => {\n"],[1,"        "],[0,"\n    }\n}"]],"start1":673,"start2":673,"length1":16,"length2":24},{"diffs":[[0,"n;\n\n"],[-1,"    // find tool to run\n"],[0,"    "]],"start1":1418,"start2":1418,"length1":32,"length2":8},{"diffs":[[0,"q.method) {\n"],[1,"        // 1️⃣  Discovery: tools/list\n        //    → return the single LED tool we support.\n"],[0,"        case"]],"start1":1436,"start2":1436,"length1":24,"length2":117},{"diffs":[[0,"ls: "],[-1,"tools.map(t => ({ \n                    name: t.name, \n                    description: t.description, \n                    inputSchema: inputSchema \n                }))"],[1,"[LED_TOOL_DEF]"],[0," }\n "]],"start1":1678,"start2":1678,"length1":176,"length2":22},{"diffs":[[0,";\n        }\n"],[1,"        // 2️⃣  Invocation: tools/call\n"],[0,"        case"]],"start1":1732,"start2":1732,"length1":24,"length2":63},{"diffs":[[0," || {};\n"],[1,"\n"],[0,"        "]],"start1":1868,"start2":1868,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"const tool = tools.find(t => t."],[1,"if ("],[0,"name "],[-1,"=== name)\n            if (!tool"],[1,"!== \"led.set\""],[0,") {\n"]],"start1":1885,"start2":1885,"length1":75,"length2":30},{"diffs":[[0,"     }\n\n"],[-1,"\n"],[0,"        "]],"start1":2125,"start2":2125,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"let content: { type: \"text\", text: string}[] = []\n            let isError: boolean\n            try {\n                const text = tool.handler(args)\n                content.push({ type: \"text\", text })\n                isError = false\n            } catch(e) {\n                text = \"\" + e\n                isError = true\n            }\n\n"],[1,"// Basic validation\n            const x = args?.x; \n            const y = args?.y; on = args?.on;\n            const ok = Number.isInteger(x) && Number.isInteger(y) &&\n                x >= 0 && x <= 4 && y >= 0 && y <= 4 &&\n                typeof on === \"boolean\";\n\n            if (!ok) {\n    "],[0,"    "]],"start1":2141,"start2":2141,"length1":343,"length2":300},{"diffs":[[0,"                "],[1,"    "],[0,"jsonrpc: \"2.0\",\n"]],"start1":2456,"start2":2456,"length1":32,"length2":36},{"diffs":[[0,"jsonrpc: \"2.0\",\n"],[1,"    "],[0,"                "]],"start1":2476,"start2":2476,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"result: {\n                    content: [{\n                        type: \"text\",\n"],[1,"    error: { code: -32602, message: \"Invalid parameters\" }\n                });\n                break;\n    "],[0,"        "],[1,"}\n\n"],[0,"    "]],"start1":2536,"start2":2536,"length1":96,"length2":125},{"diffs":[[0,"    "],[-1,"    text\n                    }]\n            "],[1,"// Perform the requested action\n            if (on) led.plot(x, y); else led.unplot(x, y);\n\n            // Successful result\n"],[0,"    "],[-1,"},\n"],[0,"        "],[1,"send({\n"],[0,"        "],[-1,"isError\n            });\n\n            // Basic validation\n            const x = args?.x;\n            const y = args?.y; on = args?.on;\n            const ok = Number.isInteger(x) && Number.isInteger(y) &&\n                x >= 0 && x <= 4 && y >= 0 && y <= 4 &&\n                typeof on === \"boolean\";\n            // Perform the requested action\n"],[1,"        jsonrpc: \"2.0\",\n                id: req.id,\n                result: {\n                    content: [{\n                        type: \"text\",\n                        text: `LED (${x},${y}) ${on ? \"on\" : \"off\"}`\n                    }],\n                    isError: false\n          "],[0,"      "],[1,"}\n"],[0,"      "],[-1,"if (on) led.plot(x, y); else led.unplot(x, y"],[1,"      }"],[0,");\n "]],"start1":2665,"start2":2665,"length1":475,"length2":467},{"diffs":[[0,"   break"],[1,";"],[0,"\n       "]],"start1":3140,"start2":3140,"length1":16,"length2":17}]}]},{"timestamp":1748982556160,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"es: "],[-1,"{ [index: string]: any; }"],[1,"Record<string, object>"],[0,"\n   "]],"start1":120,"start2":120,"length1":33,"length2":30},{"diffs":[[0,"gs: "],[-1,"{ [index: string]: any; }"],[1,"any[]"],[0,") =>"]],"start1":196,"start2":196,"length1":33,"length2":13},{"diffs":[[0,"tring\n}\n"],[-1,"\n"],[0,"const LE"]],"start1":211,"start2":211,"length1":17,"length2":16},{"diffs":[[0,"args"],[-1,": { x: number; y: number; on: number }) => {\n        const x = args.x || 0;\n        const y = args.y || 0;\n        const on = !!args.on;\n        const ok = x >= 0 && x <= 4 && y >= 0 && y <= 4;\n        if (on) led.plot(x, y);\n        else led.unplot(x, y);\n        return `(${x}, ${y}) is ${on ? `on` : `off`}`\n    }\n};\n\n\nnamespace mcp {\n    const tools = [LED_TOOL_DEF]\n\n    "],[1,") => {\n\n    }\n};\n\nconst tools = [LED_TOOL_DEF]\n\n/**\n * Send a JSON-RPC message back to the host.\n */\n"],[0,"func"]],"start1":671,"start2":671,"length1":384,"length2":109},{"diffs":[[0,"msg: any) {\n"],[-1,"    "],[0,"    serial.w"]],"start1":790,"start2":790,"length1":28,"length2":24},{"diffs":[[0,"));\n"],[-1,"    }\n\n    /**\n     * Starts a MCP server with the given tools\n     */\n    export function mcpStartServer() {\n        "],[1,"}\n\n/**\n * Optional notification: tell the client our tool list is ready.\n * (Only needed once after boot.)\n */\nsend({\n    jsonrpc: \"2.0\",\n    method: \"notifications/tools/list_changed\"\n});\n\n"],[0,"seri"]],"start1":841,"start2":841,"length1":126,"length2":198},{"diffs":[[0,"() => {\n"],[-1,"        "],[0,"    cons"]],"start1":1096,"start2":1096,"length1":24,"length2":16},{"diffs":[[0,"trim();\n"],[-1,"        "],[0,"    if ("]],"start1":1138,"start2":1138,"length1":24,"length2":16},{"diffs":[[0,"w) return;\n\n"],[-1,"        "],[0,"    let req:"]],"start1":1157,"start2":1157,"length1":32,"length2":24},{"diffs":[[0,"q: any;\n"],[-1,"        "],[0,"    try "]],"start1":1179,"start2":1179,"length1":24,"length2":16},{"diffs":[[0,";\n    try {\n"],[-1,"        "],[0,"        req "]],"start1":1185,"start2":1185,"length1":32,"length2":24},{"diffs":[[0,"e(raw);\n"],[-1,"        "],[0,"    } ca"]],"start1":1220,"start2":1220,"length1":24,"length2":16},{"diffs":[[0,"catch {\n"],[-1,"        "],[0,"        "]],"start1":1234,"start2":1234,"length1":24,"length2":16},{"diffs":[[0,"        "],[-1,"  "],[-1,"      "],[0,"return;\n"]],"start1":1277,"start2":1277,"length1":24,"length2":16},{"diffs":[[0,"    "],[-1,"        }\n\n        "],[1,"}\n\n"],[0,"    "]],"start1":1293,"start2":1293,"length1":27,"length2":11},{"diffs":[[0,"nvelope\n"],[-1,"        "],[0,"    if ("]],"start1":1326,"start2":1326,"length1":24,"length2":16},{"diffs":[[0,"eturn;\n\n"],[-1,"        "],[0,"    // f"]],"start1":1407,"start2":1407,"length1":24,"length2":16},{"diffs":[[0," to run\n"],[-1,"        "],[0,"    swit"]],"start1":1431,"start2":1431,"length1":24,"length2":16},{"diffs":[[0,") {\n        "],[-1,"    "],[-1,"    "],[0,"case \"tools/"]],"start1":1461,"start2":1461,"length1":32,"length2":24},{"diffs":[[0,"    "],[1,"send({\n"],[0,"        "],[-1,"handleToolsList(req.id)"],[1,"        jsonrpc: \"2.0\","],[0,"\n   "]],"start1":1502,"start2":1502,"length1":39,"length2":46},{"diffs":[[0,"    "],[-1,"    break;"],[1,"id: req.id,"],[0,"\n   "]],"start1":1557,"start2":1557,"length1":18,"length2":19},{"diffs":[[0,"    "],[-1,"}\n                case \"tools/call\": {\n                    let content: { type: \"text\", text?: string }[] = []\n                    let isError: boolean\n                    try {\n                        if (!req.params) throw \"missing params\"\n\n            "],[1,"result: { tools: tools.map(t => ({ \n                    name: t.name, \n                    description: t.description, \n                    inputSchema: inputSchema \n                })) }\n            });\n            break;\n        }\n        case \"tools/call\": {\n"],[0,"    "]],"start1":1585,"start2":1585,"length1":263,"length2":270},{"diffs":[[0," { name,"],[1," arguments:"],[0," args } "]],"start1":1868,"start2":1868,"length1":16,"length2":27},{"diffs":[[0,"q.params"],[-1,"\n  "],[1," || {};\n"],[0,"        "]],"start1":1899,"start2":1899,"length1":19,"length2":24},{"diffs":[[0,"            "],[-1,"          "],[0,"const tool ="]],"start1":1915,"start2":1915,"length1":34,"length2":24},{"diffs":[[0,"    "],[-1,"            if (!tool) throw \"tool not found\"\n\n                        const text = tool.handler(args)"],[1,"if (!tool) {\n                send({\n                    jsonrpc: \"2.0\",\n                    id: req.id,\n                    error: { code: -32601, message: \"Unknown tool\" }\n                });\n                break;"],[0,"\n   "]],"start1":1981,"start2":1981,"length1":110,"length2":223},{"diffs":[[0,"ak;\n            "],[1,"}\n\n\n"],[0,"            cont"]],"start1":2197,"start2":2197,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"let "],[0,"content"],[-1,".push("],[1,": "],[0,"{ type: \"tex"]],"start1":2217,"start2":2217,"length1":37,"length2":37},{"diffs":[[0,"text"],[-1," })\n                        isError = false"],[1,": string}[] = []\n            let isError: boolean"],[0,"\n   "]],"start1":2258,"start2":2258,"length1":51,"length2":57},{"diffs":[[0,"    "],[1,"try {\n"],[0,"        "],[-1,"} catch (e) {\n        "],[1,"        const text = tool.handler(args)\n"],[0,"    "]],"start1":2320,"start2":2320,"length1":38,"length2":62},{"diffs":[[0,"text"],[-1,": \"\" + e"],[0," })\n"]],"start1":2423,"start2":2423,"length1":16,"length2":8},{"diffs":[[0,"    "],[-1,"        isError = true"],[1,"isError = false\n            } catch(e) {"],[0,"\n   "]],"start1":2443,"start2":2443,"length1":30,"length2":48},{"diffs":[[0,"                "],[-1,"    }"],[1,"text = \"\" + e"],[0,"\n               "]],"start1":2488,"start2":2488,"length1":37,"length2":45},{"diffs":[[0,"                "],[1,"isError = true\n            }\n\n        "],[0,"    send({\n     "]],"start1":2518,"start2":2518,"length1":32,"length2":70},{"diffs":[[0,"     send({\n"],[-1,"        "],[0,"            "]],"start1":2571,"start2":2571,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"   "],[-1,"     "],[0,"id: req.id,\n"]],"start1":2619,"start2":2619,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"        "],[0,"result: { co"]],"start1":2647,"start2":2647,"length1":32,"length2":24},{"diffs":[[0,"t: {"],[-1," content, isError },\n"],[1,"\n                    content: [{\n     "],[0,"    "]],"start1":2664,"start2":2664,"length1":29,"length2":46},{"diffs":[[0,"                "],[-1," });"],[1,"type: \"text\","],[0,"\n               "]],"start1":2709,"start2":2709,"length1":36,"length2":45},{"diffs":[[0,"    "],[-1,"break\n"],[1,"    text\n    "],[0,"    "]],"start1":2755,"start2":2755,"length1":14,"length2":21},{"diffs":[[0,"               }"],[-1,"\n"],[1,"]\n    "],[0,"            }\n  "]],"start1":2773,"start2":2773,"length1":33,"length2":38},{"diffs":[[0,"               }"],[1,","],[0,"\n        });\n\n  "]],"start1":2792,"start2":2792,"length1":32,"length2":33},{"diffs":[[0,"    "],[-1,"});\n\n"],[0,"        "],[-1,"notifyToolsListChanged()\n    }\n\n    function notifyToolsListChanged() {\n        send({\n            jsonrpc: \"2.0\",\n            method: \"notifications/tools/list_changed\"\n        });\n    }\n\n    function handleToolsList(id: string) {"],[1,"isError\n            });\n\n            // Basic validation\n            const x = args?.x;\n            const y = args?.y; on = args?.on;\n            const ok = Number.isInteger(x) && Number.isInteger(y) &&"],[0,"\n   "]],"start1":2814,"start2":2814,"length1":252,"length2":218},{"diffs":[[0,"    "],[-1,"send({\n"],[0,"        "],[-1,"    jsonrpc: \"2.0\",\n            id: id,\n            result: {\n                tools: tools.map(t => ({"],[1,"x >= 0 && x <= 4 && y >= 0 && y <= 4 &&\n                typeof on === \"boolean\";\n            // Perform the requested action\n            if (on) led.plot(x, y); else led.unplot(x, y);"],[0,"\n   "]],"start1":3033,"start2":3033,"length1":125,"length2":199},{"diffs":[[0,"    "],[1,"break\n"],[0,"        "],[-1,"name: t.name,\n                    description: t.description"],[1,"}\n\n        // 3️⃣  Any other method → Method not found\n        default:\n            send({\n                jsonrpc: \"2.0\""],[0,",\n  "]],"start1":3237,"start2":3237,"length1":76,"length2":143},{"diffs":[[0,"    "],[-1," "],[-1,"   inputSchema: t.inputSchema\n                }))\n        "],[1,"id: req.id,\n                error: { code: -32601, message: \"Unknown method\" }\n"],[0,"    "],[-1,"}\n"],[0,"    "]],"start1":3390,"start2":3390,"length1":73,"length2":91},{"diffs":[[0,"\n    }\n}"],[1,");"],[0,"\n"]],"start1":3488,"start2":3488,"length1":9,"length2":11}]}]},{"timestamp":1748983146541,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"interface McpTool {\n    name: string\n    description: string\n    inputSchema: {\n        type: \"object\",\n        properties: { [index: string]: any; }\n        required: string[]\n    }\n    handler: (args: { [index: string]: any; }) => string\n}\n\n"],[0,"const LED_TO"]],"start1":0,"start2":0,"length1":12,"length2":255},{"diffs":[[0,"};\n\n"],[-1,"mcp.startServer()"],[1,"\nnamespace mcp {\n    const tools = [LED_TOOL_DEF]\n\n    function send(msg: any) {\n        serial.writeLine(JSON.stringify(msg));\n    }\n\n    /**\n     * Starts a MCP server with the given tools\n     */\n    export function mcpStartServer() {\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), () => {\n            const raw = serial.readLine().trim();\n            if (!raw) return;\n\n            let req: any;\n            try {\n                req = JSON.parse(raw);\n            } catch {\n                // malformed JSON – ignore\n                return;\n            }\n\n            // Validate JSON-RPC envelope\n            if (!req || req.jsonrpc !== \"2.0\" || typeof req.id === \"undefined\") return;\n\n            // find tool to run\n            switch (req.method) {\n                case \"tools/list\": {\n                    handleToolsList(req.id)\n                    break;\n                }\n                case \"tools/call\": {\n                    let content: { type: \"text\", text?: string }[] = []\n                    let isError: boolean\n                    try {\n                        if (!req.params) throw \"missing params\"\n\n                        const { name, args } = req.params\n                        const tool = tools.find(t => t.name === name)\n                        if (!tool) throw \"tool not found\"\n\n                        const text = tool.handler(args)\n                        content.push({ type: \"text\", text })\n                        isError = false\n                    } catch (e) {\n                        content.push({ type: \"text\", text: \"\" + e })\n                        isError = true\n                    }\n                    send({\n                        jsonrpc: \"2.0\",\n                        id: req.id,\n                        result: { content, isError },\n                    });\n                    break\n                }\n            }\n        });\n\n        notifyToolsListChanged()\n    }\n\n    function notifyToolsListChanged() {\n        send({\n            jsonrpc: \"2.0\",\n            method: \"notifications/tools/list_changed\"\n        });\n    }\n\n    function handleToolsList(id: string) {\n        send({\n            jsonrpc: \"2.0\",\n            id: id,\n            result: {\n                tools: tools.map(t => ({\n                    name: t.name,\n                    description: t.description,\n                    inputSchema: t.inputSchema\n                }))\n            }\n        });\n    }\n}\n"]],"start1":1016,"start2":1016,"length1":21,"length2":2460}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"mcp.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\""],[0,"\n   "]],"start1":220,"start2":220,"length1":70,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"mcp.ts","value":"interface McpTool {\n    name: string\n    description: string\n    inputSchema: {\n        type: \"object\",\n        properties: { [index: string]: any; }\n        required: string[]\n    }\n    handler: (args: { [index: string]: any; }) => string\n}\ninterface McpRequest {\n    jsonrpc: \"2.0\"\n    id: string\n    method: \"tools/list\" | \"tools/call\"\n}\ninterface McpToolCallRequest extends McpRequest {\n    method: \"tools/call\"\n    params: {\n        name: string\n        args: { [index: string]: any }\n    }\n}\n\nnamespace mcp {\n    const tools: McpTool[] = []\n\n    function send(msg: any) {\n        serial.writeLine(JSON.stringify(msg));\n    }\n\n    /**\n     * Starts a MCP server with the given tools\n     */\n    export function startServer() {\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), () => {\n            const raw = serial.readLine().trim();\n            if (!raw) return;\n\n            let req: McpRequest;\n            try {\n                req = JSON.parse(raw);\n            } catch {\n                // malformed JSON – ignore\n                return;\n            }\n\n            // Validate JSON-RPC envelope\n            if (!req || req.jsonrpc !== \"2.0\" || typeof req.id === \"undefined\") return;\n\n            // find tool to run\n            switch (req.method) {\n                case \"tools/list\": {\n                    handleToolsList(req)\n                    break;\n                }\n                case \"tools/call\": {\n                    handleToolCall(req as McpToolCallRequest)\n                    break\n                }\n            }\n        });\n\n        notifyToolsListChanged()\n    }\n\n    function notifyToolsListChanged() {\n        send({\n            jsonrpc: \"2.0\",\n            method: \"notifications/tools/list_changed\"\n        });\n    }\n\n    function handleToolsList(req: McpRequest) {\n        send({\n            jsonrpc: \"2.0\",\n            id: req.id,\n            result: {\n                tools: tools.map(t => ({\n                    name: t.name,\n                    description: t.description,\n                    inputSchema: t.inputSchema\n                }))\n            }\n        });\n    }\n\n    function handleToolCall(req: McpToolCallRequest) {\n        let content: { type: \"text\", text?: string }[] = []\n        let isError: boolean\n        try {\n            if (!req.params) throw \"missing params\"\n\n            const { name, args } = req.params\n            const tool = tools.find(t => t.name === name)\n            if (!tool) throw \"tool not found\"\n\n            const text = tool.handler(args)\n            content.push({ type: \"text\", text })\n            isError = false\n        } catch (e) {\n            content.push({ type: \"text\", text: \"\" + e })\n            isError = true\n        }\n        send({\n            jsonrpc: \"2.0\",\n            id: req.id,\n            result: { content, isError },\n        });\n    }\n}\n"}]}],"snapshots":[{"timestamp":1748981361905,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"micro-mcp\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1748983162123,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"interface McpTool {\n    name: string\n    description: string\n    inputSchema: {\n        type: \"object\",\n        properties: { [index: string]: any; }\n        required: string[]\n    }\n    handler: (args: { [index: string]: any; }) => string\n}\n\nconst LED_TOOL_DEF: McpTool = {\n    name: \"led.set\",\n    description: \"Turn a pixel on the 5×5 LED matrix on or off\",\n    inputSchema: {\n        type: \"object\",\n        properties: {\n            x: { type: \"integer\", description: \"Column (0-4)\" },\n            y: { type: \"integer\", description: \"Row (0-4)\" },\n            on: { type: \"boolean\", description: \"true → on, false → off\" }\n        },\n        required: [\"x\", \"y\", \"on\"]\n    },\n    handler: (args: { x: number; y: number; on: number }) => {\n        const x = args.x || 0;\n        const y = args.y || 0;\n        const on = !!args.on;\n        const ok = x >= 0 && x <= 4 && y >= 0 && y <= 4;\n        if (on) led.plot(x, y);\n        else led.unplot(x, y);\n        return `(${x}, ${y}) is ${on ? `on` : `off`}`\n    }\n};\n\n\nnamespace mcp {\n    const tools = [LED_TOOL_DEF]\n\n    function send(msg: any) {\n        serial.writeLine(JSON.stringify(msg));\n    }\n\n    /**\n     * Starts a MCP server with the given tools\n     */\n    export function mcpStartServer() {\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), () => {\n            const raw = serial.readLine().trim();\n            if (!raw) return;\n\n            let req: any;\n            try {\n                req = JSON.parse(raw);\n            } catch {\n                // malformed JSON – ignore\n                return;\n            }\n\n            // Validate JSON-RPC envelope\n            if (!req || req.jsonrpc !== \"2.0\" || typeof req.id === \"undefined\") return;\n\n            // find tool to run\n            switch (req.method) {\n                case \"tools/list\": {\n                    handleToolsList(req.id)\n                    break;\n                }\n                case \"tools/call\": {\n                    let content: { type: \"text\", text?: string }[] = []\n                    let isError: boolean\n                    try {\n                        if (!req.params) throw \"missing params\"\n\n                        const { name, args } = req.params\n                        const tool = tools.find(t => t.name === name)\n                        if (!tool) throw \"tool not found\"\n\n                        const text = tool.handler(args)\n                        content.push({ type: \"text\", text })\n                        isError = false\n                    } catch (e) {\n                        content.push({ type: \"text\", text: \"\" + e })\n                        isError = true\n                    }\n                    send({\n                        jsonrpc: \"2.0\",\n                        id: req.id,\n                        result: { content, isError },\n                    });\n                    break\n                }\n            }\n        });\n\n        notifyToolsListChanged()\n    }\n\n    function notifyToolsListChanged() {\n        send({\n            jsonrpc: \"2.0\",\n            method: \"notifications/tools/list_changed\"\n        });\n    }\n\n    function handleToolsList(id: string) {\n        send({\n            jsonrpc: \"2.0\",\n            id: id,\n            result: {\n                tools: tools.map(t => ({\n                    name: t.name,\n                    description: t.description,\n                    inputSchema: t.inputSchema\n                }))\n            }\n        });\n    }\n\n    function handleToolCall()\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"micro-mcp\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1748983602229}